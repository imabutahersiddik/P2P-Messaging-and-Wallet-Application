import socket
import re
import urllib.request
import urllib.parse
import http.client
import time
import xml.etree.ElementTree as ET

def discover():
    """Discover UPNP capable routers in the local network
    Returns a list of URLs with service descriptions
    """
    SSDP_ADDR = "239.255.255.250"
    SSDP_PORT = 1900
    SSDP_MX = 2
    SSDP_ST = "urn:schemas-upnp-org:device:InternetGatewayDevice:1"

    WAIT = 1

    ssdpRequest = (
        "M-SEARCH * HTTP/1.1\r\n"
        + "HOST: %s:%d\r\n" % (SSDP_ADDR, SSDP_PORT)
        + 'MAN: "ssdp:discover"\r\n'
        + "MX: %d\r\n" % (SSDP_MX,)
        + "ST: %s\r\n" % (SSDP_ST,)
        + "\r\n"
    )

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setblocking(0)
    sock.sendto(ssdpRequest.encode(), (SSDP_ADDR, SSDP_PORT))
    time.sleep(WAIT)
    paths = []
    for _ in range(10):
        try:
            data, fromaddr = sock.recvfrom(1024)
            parsed = re.findall(
                r"(?P<name>.*?): (?P<value>.*?)\r\n", str(data, "utf-8")
            )

            # Get the location header
            location = [x for x in parsed if x[0].lower() == "location"]

            # Use the URL to get the router path
            if location:
                router_path = location[0][1]
                paths.append(router_path)

        except socket.error:
            break
    return paths

def get_wanip_path(upnp_url):
    # Get the profile XML file and read it into a variable
    directory = urllib.request.urlopen(upnp_url).read()

    # Parse the XML document
    root = ET.fromstring(directory)

    # Find all 'serviceType' elements
    for service in root.findall(".//serviceType"):
        if "WANIPConnection" in service.text or "WANPPPConnection" in service.text:
            path = service.find("../controlURL").text
            return path

def open_port(
    service_url,
    external_port,
    internal_client,
    internal_port=None,
    protocol="TCP",
    duration=0,
    description=None,
    enabled=1,
):
    if internal_port is None:
        internal_port = external_port

    if description is None:
        description = "generated by port-forward.py"

    if not enabled:
        duration = 1

    # Create the XML payload
    envelope = ET.Element("s:Envelope", {
        "xmlns:s": "http://schemas.xmlsoap.org/soap/envelope/",
        "s:encodingStyle": "http://schemas.xmlsoap.org/soap/encoding/"
    })
    body = ET.SubElement(envelope, "s:Body")
    fn = ET.SubElement(body, "u:AddPortMapping", {
        "xmlns:u": "urn:schemas-upnp-org:service:WANIPConnection:1"
    })

    # Setup the argument element names and values
    arguments = [
        ("NewRemoteHost", "0.0.0.0"),
        ("NewExternalPort", external_port),
        ("NewProtocol", protocol),
        ("NewInternalPort", internal_port),
        ("NewInternalClient", internal_client),
        ("NewEnabled", enabled),
        ("NewPortMappingDescription", description),
        ("NewLeaseDuration", duration),
    ]

    for k, v in arguments:
        arg = ET.SubElement(fn, k)
        arg.text = str(v)

    # Convert the XML to a string
    pure_xml = ET.tostring(envelope, encoding='utf-8', xml_declaration=True)

    parsedurl = urllib.parse.urlparse(service_url)
    conn = http.client.HTTPConnection(parsedurl.hostname, parsedurl.port)

    # Send the request
    conn.request(
        "POST",
        parsedurl.path,
        pure_xml,
        {
            "SOAPAction": '"urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping"',
            "Content-Type": "text/xml",
        },
    )

    # Wait for a response
    resp = conn.getresponse()

    return resp.status, resp.read()

def get_my_ip(routerip=None):
    if routerip is None:
        routerip = "8.8.8.8"  # default route
    ret = None
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect((routerip, 80))
        ret = s.getsockname()[0]
        s.close()
    except:
        pass
    return ret

def forwardPort(
    eport, iport, router, lanip, disable, protocol, time, description, verbose
):
    if verbose:
        print("Discovering routers...")

    res = discover()

    allok = True
    for path in res:
        discparsed = urllib.parse.urlparse(path)
        service_path = get_wanip_path(path)
        service_url = "%s://%s%s" % (discparsed.scheme, discparsed.netloc, service_path)
        routerip = discparsed.netloc.split(":")[0]
        if router is not None and routerip not in router:
            continue

        localip = lanip
        if lanip is None:
            localip = get_my_ip(routerip)

        enabled = int(not disable)

        dis = ""
        if not enabled:
            dis = "disable of "

        status, message = open_port(
            service_url,
            eport,
            internal_client=localip,
            internal_port=iport,
            protocol=protocol,
            duration=time,
            description=description,
            enabled=enabled,
        )
        if status == 200:
            if verbose:
                print(
                    "%sport forward on %s successful, %s->%s:%s"
                    % (dis, routerip, eport, localip, iport)
                )
        else:
            sys.stderr.write(
                "%sport forward on %s failed, status=%s message=%s\n"
                % (dis, routerip, status, message)
            )
            allok = False

    return allok
